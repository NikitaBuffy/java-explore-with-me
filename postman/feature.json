{
	"info": {
		"_postman_id": "f0b4c6f5-e925-4f47-a10a-fe26822839df",
		"name": "Explore With Me - Comment feature",
		"description": "Тестирование дополнительной функциональности (фичи) добавления комментариев в рамках дипломного проекта.\n\nКоллекция не тестирует работу эндпоинтов по добавлению фотографий.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26635933"
	},
	"item": [
		{
			"name": "Добавление и удаление комментариев",
			"item": [
				{
					"name": "Add comment for user who not participate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Отличное мероприятие, мне очень понравилось. Крутая организация и отличное времяпрепровождение. Посетил бы еще раз.\",\n  \"rating\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/16/events/5/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"16",
								"events",
								"5",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment with short text < 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Круто\",\n  \"rating\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/13/events/5/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"13",
								"events",
								"5",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment without rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Отличное мероприятие, мне очень понравилось. Крутая организация и отличное времяпрепровождение. Посетил бы еще раз.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/13/events/5/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"13",
								"events",
								"5",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment with rating > 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Отличное мероприятие, мне очень понравилось. Крутая организация и отличное времяпрепровождение. Посетил бы еще раз.\",\n  \"rating\": 6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/13/events/5/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"13",
								"events",
								"5",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment with rating < 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Отличное мероприятие, мне очень понравилось. Крутая организация и отличное времяпрепровождение. Посетил бы еще раз.\",\n  \"rating\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/13/events/5/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"13",
								"events",
								"5",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									" const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Коммментарий должен содержать поля: id, authorName, text, created, rating, photos\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"pm.expect(target).to.have.property('rating');",
									"pm.expect(target).to.have.property('photos');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.authorName).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');",
									"    pm.expect(source.rating).equal(target.rating, 'Рейтинг должен соответствовать отправленной в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Отличное мероприятие, мне очень понравилось. Крутая организация и отличное времяпрепровождение. Посетил бы еще раз.\",\n  \"rating\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/13/events/5/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"13",
								"events",
								"5",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another comment to the same event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Отличное мероприятие, мне очень понравилось. Крутая организация и отличное времяпрепровождение. Посетил бы еще раз.\",\n  \"rating\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/13/events/5/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"13",
								"events",
								"5",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by non-author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/16/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"16",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/13/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"13",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Коммментарий должен содержать поля: id, authorName, text, created, rating, photos\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"pm.expect(target).to.have.property('rating');",
									"pm.expect(target).to.have.property('photos');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.authorName).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');",
									"    pm.expect(source.rating).equal(target.rating, 'Рейтинг должен соответствовать отправленной в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Отличное мероприятие, мне очень понравилось. Крутая организация и отличное времяпрепровождение. Посетил бы еще раз.\",\n  \"rating\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/13/events/5/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"13",
								"events",
								"5",
								"comment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Получение комментариев",
			"item": [
				{
					"name": "Get comment for wrong event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/2/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"2",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created, rating, photos\", function () {",
									"    pm.expect(target).to.have.property('id');",
									"    pm.expect(target).to.have.property('authorName');",
									"    pm.expect(target).to.have.property('text');",
									"    pm.expect(target).to.have.property('created');",
									"    pm.expect(target).to.have.property('rating');",
									"    pm.expect(target).to.have.property('photos');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/5/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"5",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all comments for event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const comments = pm.response.json();",
									"",
									"pm.test(\"Каждый комментарий должен содержать поля: id, authorName, text, created, rating, photos\", function () {",
									"    pm.expect(comments).to.be.an('array').and.not.be.empty;",
									"",
									"    comments.forEach(function (comment) {",
									"        pm.expect(comment).to.have.property('id');",
									"        pm.expect(comment).to.have.property('authorName');",
									"        pm.expect(comment).to.have.property('text');",
									"        pm.expect(comment).to.have.property('created');",
									"        pm.expect(comment).to.have.property('rating');",
									"        pm.expect(comment).to.have.property('photos');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/5/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"5",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const comments = pm.response.json();",
									"",
									"pm.test(\"Каждый комментарий должен содержать поля: id, authorName, text, created, rating, photos\", function () {",
									"    pm.expect(comments).to.be.an('array').and.not.be.empty;",
									"",
									"    comments.forEach(function (comment) {",
									"        pm.expect(comment).to.have.property('id');",
									"        pm.expect(comment).to.have.property('authorName');",
									"        pm.expect(comment).to.have.property('text');",
									"        pm.expect(comment).to.have.property('created');",
									"        pm.expect(comment).to.have.property('rating');",
									"        pm.expect(comment).to.have.property('photos');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments by admin when not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const comments = pm.response.json();",
									"",
									"pm.test(\"Ответ должен вернуть пустой список\", function () {",
									"    pm.expect(comments).to.be.an('array').and.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?events=1&rating=3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "events",
									"value": "1"
								},
								{
									"key": "rating",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Получение событий с рейтингом",
			"item": [
				{
					"name": "Get full event with average rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Событие должно содержать поле rating со значением 5.0\", function () {",
									"    pm.expect(target).to.have.property('rating');",
									"    pm.expect(target.rating).to.be.eql(5.0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get short user events with rating and comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const events = pm.response.json();",
									"",
									"pm.test(\"Каждый комментарий должен содержать новые поля: comments, rating\", function () {",
									"    pm.expect(events).to.be.an('array').and.not.be.empty;",
									"",
									"    events.forEach(function (events) {",
									"        pm.expect(events).to.have.property('comments');",
									"        pm.expect(events).to.have.property('rating');",
									"    });",
									"});",
									"",
									"pm.test(\"Комментарий должен иметь верные значения comments и rating\", function () {",
									"    pm.expect(events[0].comments).to.eql(1);",
									"    pm.expect(events[0].rating).to.eql(5.0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/12/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"12",
								"events"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}